---

- name: Ubuntu desktop environment playbook
  hosts: localhost
  vars:
    - go_version: 1.10.4
  environment:
    DEBIAN_FRONTEND: noninteractive
  roles:
    # Common roles
    # - { role: locales, become: true }
    - { role: common, become: true }
    # - { role: zsh, become: true }
    # - { role: dotfiles, become: true }
    # - { role: java-openjdk, become: true }
    # - { role: projects-installer }
    # Server roles
    # - { role: apache2, become: true }
    # - { role: apache2-php, become: true }
    - { role: docker, become: true }
    - { role: nodejs, become: true }
    - { role: python, become: true }
    # - { role: rbenv, become: true }
    - { role: ssh, become: true }
    # Desktop roles
    # - { role: desktop, become: true }
    - { role: desktop-cleanup, become: true }
    # - { role: desktop-autostart, become: true }
    # - { role: desktop-preferences-unity }
    - { role: atom, become: true }
    - { role: cmprescott.chrome, become: true }
    - { role: gdrive, become: true }
    # - { role: remmina, become: true }
    # - { role: skype, become: true }
    # - { role: smartgit, become: true }
    # - { role: spotify, become: true }
    # - { role: teamviewer, become: true }
    - { role: vagrant, become: true }
    - { role: virtualbox, become: true }
    # - { role: wine, become: true }
    # bspwm
    # - { role: sxhkd, become: true }
    # - { role: bspwm, become: true }
    # - { role: bspwm-panel, become: true }
    # - { role: bspwm-environment, become: true }
    # User roles
    # - { role: gulp}
    # - { role: browsersync }
    # - { role: bower }
    # - { role: webpack }
    # - role: gantsign.pin-to-launcher
    #   pin_to_launcher: unity
    #   pin_to_launcher_favorites:
    #     # You'll probably need these apps pinned when using Unity.
    #     - application: 'ubiquity.desktop' # The application search/menu
    #       when_desktop: unity
    #     - application: 'org.gnome.Nautilus.desktop' # The file browser
    #     # The following two apps are less frequently used so you may want to put
    #     # them below your other apps.
    #     - application: 'ubuntu-software-center.desktop' # Ubuntu software center
    #     - application: 'unity-control-center.desktop' # System settings
    #
    #     # Full list to choose from...
    #     # ...
    #     # ls /usr/share/applications
    #     # and explanation...
    #     # https://askubuntu.com/a/829228/811174
    #     # and
    #     # https://askubuntu.com/a/109168/811174
    #
    #     # Pin the applications of your choice below.
    #     #
    #     # Tip: run `gsettings get com.canonical.Unity.Launcher favorites` to
    #     # see the apps you currently have pinned.
    #     - application: google-chrome.desktop
    #     - application: atom.desktop
    #     - application: remmina.desktop
    #     # The 'unity' favorites are not apps as such, but are placeholders in
    #     # the Ubuntu launcher.
    #     #
    #     # You can reorder the items below, but be don't omit them unless you
    #     # know what you're doing.
    #     #
    #     # These can be omitted if you're using DockbarX, but they'll be ignored
    #     # anyway.
    #     - unity: running-apps
    #     - unity: expo-icon
    #     - unity: devices

  tasks:
    # - name: Apply favorites in side bar
    #   # see https://askubuntu.com/a/171723/811174
    #   command: unity --replace
    - name: Ensure ssh key generated ready to upload to GitHub and GitLab
      command: ssh-keygen -t rsa -f "{{ ssh.key_pair_path }}" -N ''
      args:
        creates: "{{ ssh.key_pair_path }}"
    - name: Wait until creds-for-curl-github.netrc is created from creds-for-curl-github.netrc.template and updated with GitHub access key with scope write:public_key
      wait_for:
        path: creds-for-curl-github.netrc
        search_regex: .*password\s\w+
    - name: Upload SSH key to GitHub
      shell: KEY=$( cat {{ ssh.key_pair_path }}.pub );TITLE=${KEY/* };JSON=$( jo title="$TITLE" key="$KEY" );curl --netrc-file creds-for-curl-github.netrc -d "$JSON" https://api.github.com/user/keys
      args:
        executable: /bin/bash
    - name: Wait until creds-for-curl-gitlab.txt is created from creds-for-curl-gitlab.txt.template and updated with GitLab access key with scope api
      wait_for:
        path: creds-for-curl-gitlab.txt
        search_regex: .*PRIVATE-TOKEN:\s\w+
    - name: Upload SSH key to GitLab
      shell: KEY=$( cat {{ ssh.key_pair_path }}.pub );TITLE=${KEY/* };curl -X POST -K creds-for-curl-gitlab.txt -F "title=$TITLE" -F "key=$KEY" "https://gitlab.com/api/v4/user/keys"
      args:
        executable: /bin/bash
    - name: Change to git protocol
      shell: git remote set-url origin git@github.com:matthewcosgrove/ansible-ubuntu.git
      args:
        executable: /bin/bash
    - name: Install libgnome-keyring-dev for git credential helper
      apt: pkg=libgnome-keyring-dev state=latest
      become: true
    - name: Set up gnome-keyring for git credential helper
      command: make --directory=/usr/share/doc/git/contrib/credential/gnome-keyring
      become: true
    - name: Set up git credential helper
      git_config:
        name: credential.helper
        scope: global
        value: /usr/share/doc/git/contrib/credential/gnome-keyring/git-credential-gnome-keyring
    - name: Set up git to suppress message on push
      git_config:
        name: push.default
        scope: global
        value: simple
    - name: update git config globally setting user.email
      git_config:
        name: user.email
        scope: global
        value: mc.matthew.cosgrove@gmail.com
    - name: update git config globally setting user.name
      git_config:
        name: user.name
        scope: global
        value: matthewcosgrove
    - name: update git config globally setting alias for git status as git st
      git_config:
        name: alias.st
        scope: global
        value: status
    - name: Upgrade ssh to 7.5 (download binaries)
      shell: wget -nc "{{ item }}" -P /tmp/ssh-install
      with_items:
        - https://launchpadlibrarian.net/298453060/libkrb5support0_1.14.3+dfsg-2ubuntu1_amd64.deb
        - https://launchpadlibrarian.net/298453058/libkrb5-3_1.14.3+dfsg-2ubuntu1_amd64.deb
        - https://launchpadlibrarian.net/298453050/libgssapi-krb5-2_1.14.3+dfsg-2ubuntu1_amd64.deb
        - https://launchpadlibrarian.net/335526589/openssh-client_7.5p1-10_amd64.deb
      become: true
    - name: Upgrade ssh to 7.5 (install binaries)
      shell: sudo dpkg -i "{{ item }}"
      with_items:
        - /tmp/ssh-install/libkrb5support0_1.14.3+dfsg-2ubuntu1_amd64.deb
        - /tmp/ssh-install/libkrb5-3_1.14.3+dfsg-2ubuntu1_amd64.deb
        - /tmp/ssh-install/libgssapi-krb5-2_1.14.3+dfsg-2ubuntu1_amd64.deb
        - /tmp/ssh-install/openssh-client_7.5p1-10_amd64.deb
    - name: fix dependency issues as a result of manual upgrade of ssh client
      shell: apt-get -yqf install
      become: true
    - name: Register the current Go version (if any)
      command: /usr/local/go/bin/go version
      ignore_errors: yes
      register: go_version_current
      changed_when: false
    - debug: var=go_version_current
    - name: Download golang {{ go_version }}
      shell: wget -nc https://storage.googleapis.com/golang/go{{ go_version }}.linux-amd64.tar.gz -O /tmp/go{{ go_version }}.linux-amd64.tar.gz
      args:
        executable: /bin/bash
      when: go_version_current.failed == true or go_version not in go_version_current.stdout
    - name: Install golang {{ go_version }}
      shell: sudo tar -C /usr/local -xzf /tmp/go{{ go_version }}.linux-amd64.tar.gz
      args:
        executable: /bin/bash
      when: go_version_current.failed == true or go_version not in go_version_current.stdout
      become: true
    - name: update ~/.profile for golang
      lineinfile:
        dest: ~/.profile
        state: present
        line: "{{ item.line }}"
      when: go_version_current.failed == true or go_version not in go_version_current.stdout
      with_items:
        - { line: 'export GOPATH=~/go' }
        - { line: 'export GOBIN=$GOPATH/bin' }
        - { line: 'export PATH=$PATH:/usr/local/go/bin:$GOBIN' }
        - { line: 'mkdir -p $GOPATH && mkdir -p $GOBIN' }
    # - name: Install cf cli
    #   apt:
    #     deb: https://cli.run.pivotal.io/stable?release=debian64&source=pws
    #   become: true
    - name: Install om cli
      apt:
        deb: https://github.com/pivotal-cf/om/releases/download/0.35.0/om-linux
      become: true
    - name: Install bosh v2 cli (download go binary onto path and chmod +x)
      shell: wget -nc https://s3.amazonaws.com/bosh-cli-artifacts/bosh-cli-3.0.1-linux-amd64 -O /usr/local/bin/bosh; chmod +x /usr/local/bin/bosh
      become: true
    - name: Install 1password cli (download go binary onto path and chmod +x)
      shell: wget -nc https://cache.agilebits.com/dist/1P/op/pkg/v0.5.3/op_linux_amd64_v0.5.3.zip -O /tmp/op.zip && unzip /tmp/op.zip; mv /tmp/op /usr/local/bin/op; chmod +x /usr/local/bin/op
      become: true
    - stat: path=/opt/zoom
      register: opt_zoom
    - name: Install Zoom Conferencing aka zoom.us (download deb file)
      shell: wget -nc https://zoom.us/client/latest/zoom_amd64.deb -P /tmp/zoom-install
      when: not opt_zoom.stat.exists
      become: true
    - name: Install Zoom Conferencing aka zoom.us (install deb file)
      shell: sudo dpkg -i /tmp/zoom-install/zoom_amd64.deb
      when: not opt_zoom.stat.exists
    - name: Install vim-plug
      shell: curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    - name: Clone vim-go
      shell: git clone https://github.com/fatih/vim-go.git ~/.vim/plugged/vim-go
